# source: http://localhost:8000/graphql
# timestamp: Tue Jul 30 2019 09:17:41 GMT+0200 (Central European Summer Time)

input AddFormQuestionInput {
  form: ID!
  question: ID!
  clientMutationId: String
}

"""
Add question at the end of form.
"""
type AddFormQuestionPayload {
  form: Form
  clientMutationId: String
}

input AddWorkflowFlowInput {
  workflow: ID!
  tasks: [ID]!
  next: FlowJexl!
  clientMutationId: String
}

type AddWorkflowFlowPayload {
  workflow: Workflow
  clientMutationId: String
}

interface Answer {
  id: ID
  createdAt: DateTime!
  createdByUser: String
  createdByGroup: String
  modifiedAt: DateTime!
  question: Question!
  meta: GenericScalar!
}

type AnswerConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!

  """
  Contains the nodes in this connection.
  """
  edges: [AnswerEdge]!
  totalCount: Int
}

"""
A Relay edge containing a `Answer` and its cursor.
"""
type AnswerEdge {
  """
  The item at the end of the edge
  """
  node: Answer

  """
  A cursor for use in pagination
  """
  cursor: String!
}

enum AnswerHierarchyMode {
  DIRECT
  FAMILY
}

enum AnswerLookupMode {
  EXACT
  STARTSWITH
  CONTAINS
  ICONTAINS
  INTERSECTS
  GTE
  GT
  LTE
  LT
}

"""
An enumeration.
"""
enum AnswerOrdering {
  """
  Created at
  """
  CREATED_AT_ASC

  """
  Created at (descending)
  """
  CREATED_AT_DESC

  """
  Modified at
  """
  MODIFIED_AT_ASC

  """
  Modified at (descending)
  """
  MODIFIED_AT_DESC

  """
  Created by user
  """
  CREATED_BY_USER_ASC

  """
  Created by user (descending)
  """
  CREATED_BY_USER_DESC

  """
  Created by group
  """
  CREATED_BY_GROUP_ASC

  """
  Created by group (descending)
  """
  CREATED_BY_GROUP_DESC
}

input CancelCaseInput {
  id: ID!
  clientMutationId: String
}

type CancelCasePayload {
  case: Case
  clientMutationId: String
}

type Case implements Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String

  """
  The ID of the object.
  """
  id: ID!

  """
  Time when case has either been canceled or completed
  """
  closedAt: DateTime
  closedByUser: String
  closedByGroup: String
  workflow: Workflow!
  status: CaseStatus!
  meta: GenericScalar
  document: Document
  workItems(
    before: String
    after: String
    first: Int
    last: Int
    metaValue: [MetaValueFilterType]
    status: WorkItemStatusArgument
    task: ID
    case: ID
    createdByUser: String
    createdByGroup: String
    metaHasKey: String

    """
    WorkItemOrdering
    """
    orderBy: [WorkItemOrdering]
    addressedGroups: [String]
    documentHasAnswer: [HasAnswerFilterType]
    caseDocumentHasAnswer: [HasAnswerFilterType]
  ): WorkItemConnection
  parentWorkItem: WorkItem
}

type CaseConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!

  """
  Contains the nodes in this connection.
  """
  edges: [CaseEdge]!
  totalCount: Int
}

"""
A Relay edge containing a `Case` and its cursor.
"""
type CaseEdge {
  """
  The item at the end of the edge
  """
  node: Case

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
An enumeration.
"""
enum CaseOrdering {
  """
  Status
  """
  STATUS_ASC

  """
  Status (descending)
  """
  STATUS_DESC

  """
  Created at
  """
  CREATED_AT_ASC

  """
  Created at (descending)
  """
  CREATED_AT_DESC

  """
  Modified at
  """
  MODIFIED_AT_ASC

  """
  Modified at (descending)
  """
  MODIFIED_AT_DESC

  """
  Created by user
  """
  CREATED_BY_USER_ASC

  """
  Created by user (descending)
  """
  CREATED_BY_USER_DESC

  """
  Created by group
  """
  CREATED_BY_GROUP_ASC

  """
  Created by group (descending)
  """
  CREATED_BY_GROUP_DESC
}

"""
An enumeration.
"""
enum CaseStatus {
  """
  Case is running and work items need to be completed.
  """
  RUNNING

  """
  Case is done.
  """
  COMPLETED

  """
  Case is cancelled.
  """
  CANCELED
}

"""
An enumeration.
"""
enum CaseStatusArgument {
  """
  Case is running and work items need to be completed.
  """
  RUNNING

  """
  Case is done.
  """
  COMPLETED

  """
  Case is cancelled.
  """
  CANCELED
}

type ChoiceQuestion implements Question & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  label: String!
  isRequired: QuestionJexl!
  isHidden: QuestionJexl!
  isArchived: Boolean!
  infoText: String
  meta: GenericScalar!
  source: Question
  forms(
    before: String
    after: String
    first: Int
    last: Int
    metaValue: [MetaValueFilterType]

    """
    FormOrdering
    """
    orderBy: [FormOrdering]
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    createdByUser: String
    createdByGroup: String
    metaHasKey: String
    search: String
    slugs: [String]
  ): FormConnection
  options(
    before: String
    after: String
    first: Int
    last: Int
    metaValue: [MetaValueFilterType]
    slug: String
    label: String
    isArchived: Boolean
    createdByUser: String
    createdByGroup: String
    metaHasKey: String
    search: String

    """
    OptionOrdering
    """
    orderBy: [OptionOrdering]
  ): OptionConnection

  """
  The ID of the object.
  """
  id: ID!
}

type CompleteTaskFormTask implements Task & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  name: String!
  description: String
  type: TaskType!
  meta: GenericScalar!
  addressGroups: GroupJexl
  isArchived: Boolean!

  """
  Time in seconds task may take to be processed.
  """
  leadTime: Int
  isMultipleInstance: Boolean!
  form: Form!

  """
  The ID of the object.
  """
  id: ID!
}

type CompleteWorkflowFormTask implements Task & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  name: String!
  description: String
  type: TaskType!
  meta: GenericScalar!
  addressGroups: GroupJexl
  isArchived: Boolean!

  """
  Time in seconds task may take to be processed.
  """
  leadTime: Int
  isMultipleInstance: Boolean!

  """
  The ID of the object.
  """
  id: ID!
}

input CompleteWorkItemInput {
  id: ID!
  clientMutationId: String
}

type CompleteWorkItemPayload {
  workItem: WorkItem
  clientMutationId: String
}

input CopyFormInput {
  slug: String!
  name: String!
  description: String
  source: ID!
  isPublished: Boolean
  clientMutationId: String
}

type CopyFormPayload {
  form: Form
  clientMutationId: String
}

input CopyOptionInput {
  slug: String!
  label: String!
  source: ID!
  clientMutationId: String
}

type CopyOptionPayload {
  option: Option
  clientMutationId: String
}

input CopyQuestionInput {
  slug: String!
  label: String!
  source: ID!
  clientMutationId: String
}

type CopyQuestionPayload {
  question: Question
  clientMutationId: String
}

input CreateWorkItemInput {
  case: ID!
  multipleInstanceTask: ID!

  """
  Users responsible to undertake given work item.
  """
  assignedUsers: [String]

  """
  Offer work item to be processed by a group of users, such are not committed to process it though.
  """
  addressedGroups: [String]
  deadline: DateTime
  meta: JSONString
  clientMutationId: String
}

type CreateWorkItemPayload {
  workItem: WorkItem
  clientMutationId: String
}

type DataSource {
  info: String
  name: String!
}

type DataSourceConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!

  """
  Contains the nodes in this connection.
  """
  edges: [DataSourceEdge]!
  totalCount: Int
}

type DataSourceData {
  label: String!
  slug: String!
}

type DataSourceDataConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!

  """
  Contains the nodes in this connection.
  """
  edges: [DataSourceDataEdge]!
  totalCount: Int
}

"""
A Relay edge containing a `DataSourceData` and its cursor.
"""
type DataSourceDataEdge {
  """
  The item at the end of the edge
  """
  node: DataSourceData

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
A Relay edge containing a `DataSource` and its cursor.
"""
type DataSourceEdge {
  """
  The item at the end of the edge
  """
  node: DataSource

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

type DateAnswer implements Answer & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String

  """
  The ID of the object.
  """
  id: ID!
  question: Question!
  value: Date!
  meta: GenericScalar!
  date: Date
}

type DateQuestion implements Question & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  label: String!
  isRequired: QuestionJexl!
  isHidden: QuestionJexl!
  isArchived: Boolean!
  infoText: String
  meta: GenericScalar!
  source: Question
  forms(
    before: String
    after: String
    first: Int
    last: Int
    metaValue: [MetaValueFilterType]

    """
    FormOrdering
    """
    orderBy: [FormOrdering]
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    createdByUser: String
    createdByGroup: String
    metaHasKey: String
    search: String
    slugs: [String]
  ): FormConnection

  """
  The ID of the object.
  """
  id: ID!
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type Document implements Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String

  """
  The ID of the object.
  """
  id: ID!
  form: Form!
  meta: GenericScalar
  answers(
    before: String
    after: String
    first: Int
    last: Int
    metaValue: [MetaValueFilterType]
    question: ID
    search: String
    createdByUser: String
    createdByGroup: String
    metaHasKey: String

    """
    AnswerOrdering
    """
    orderBy: [AnswerOrdering]
    questions: [ID]
  ): AnswerConnection
  case: Case
  workItem: WorkItem
}

type DocumentConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!

  """
  Contains the nodes in this connection.
  """
  edges: [DocumentEdge]!
  totalCount: Int
}

"""
A Relay edge containing a `Document` and its cursor.
"""
type DocumentEdge {
  """
  The item at the end of the edge
  """
  node: Document

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
An enumeration.
"""
enum DocumentOrdering {
  """
  Created at
  """
  CREATED_AT_ASC

  """
  Created at (descending)
  """
  CREATED_AT_DESC

  """
  Modified at
  """
  MODIFIED_AT_ASC

  """
  Modified at (descending)
  """
  MODIFIED_AT_DESC

  """
  Created by user
  """
  CREATED_BY_USER_ASC

  """
  Created by user (descending)
  """
  CREATED_BY_USER_DESC

  """
  Created by group
  """
  CREATED_BY_GROUP_ASC

  """
  Created by group (descending)
  """
  CREATED_BY_GROUP_DESC
}

type DocumentValidityConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!

  """
  Contains the nodes in this connection.
  """
  edges: [DocumentValidityEdge]!
  totalCount: Int
}

"""
A Relay edge containing a `DocumentValidity` and its cursor.
"""
type DocumentValidityEdge {
  """
  The item at the end of the edge
  """
  node: ValidationResult

  """
  A cursor for use in pagination
  """
  cursor: String!
}

type DynamicChoiceQuestion implements Question & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  label: String!
  isRequired: QuestionJexl!
  isHidden: QuestionJexl!
  isArchived: Boolean!
  infoText: String
  meta: GenericScalar!
  source: Question
  forms(
    before: String
    after: String
    first: Int
    last: Int
    metaValue: [MetaValueFilterType]

    """
    FormOrdering
    """
    orderBy: [FormOrdering]
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    createdByUser: String
    createdByGroup: String
    metaHasKey: String
    search: String
    slugs: [String]
  ): FormConnection
  options(
    before: String
    after: String
    first: Int
    last: Int
  ): DataSourceDataConnection
  dataSource: String!

  """
  The ID of the object.
  """
  id: ID!
}

type DynamicMultipleChoiceQuestion implements Question & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  label: String!
  isRequired: QuestionJexl!
  isHidden: QuestionJexl!
  isArchived: Boolean!
  infoText: String
  meta: GenericScalar!
  source: Question
  forms(
    before: String
    after: String
    first: Int
    last: Int
    metaValue: [MetaValueFilterType]

    """
    FormOrdering
    """
    orderBy: [FormOrdering]
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    createdByUser: String
    createdByGroup: String
    metaHasKey: String
    search: String
    slugs: [String]
  ): FormConnection
  options(
    before: String
    after: String
    first: Int
    last: Int
  ): DataSourceDataConnection
  dataSource: String!

  """
  The ID of the object.
  """
  id: ID!
}

type File implements Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String

  """
  The ID of the object.
  """
  id: ID!
  name: String!
  answer: FileAnswer
  uploadUrl: String
  downloadUrl: String
  metadata: GenericScalar
}

type FileAnswer implements Answer & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String

  """
  The ID of the object.
  """
  id: ID!
  question: Question!
  value: File!
  meta: GenericScalar!
  file: File
}

type FileQuestion implements Question & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  label: String!
  isRequired: QuestionJexl!
  isHidden: QuestionJexl!
  isArchived: Boolean!
  infoText: String
  meta: GenericScalar!
  source: Question
  forms(
    before: String
    after: String
    first: Int
    last: Int
    metaValue: [MetaValueFilterType]

    """
    FormOrdering
    """
    orderBy: [FormOrdering]
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    createdByUser: String
    createdByGroup: String
    metaHasKey: String
    search: String
    slugs: [String]
  ): FormConnection

  """
  The ID of the object.
  """
  id: ID!
}

type FloatAnswer implements Answer & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String

  """
  The ID of the object.
  """
  id: ID!
  question: Question!
  value: Float!
  meta: GenericScalar!
}

type FloatQuestion implements Question & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  label: String!
  isRequired: QuestionJexl!
  isHidden: QuestionJexl!
  isArchived: Boolean!
  placeholder: String
  infoText: String
  meta: GenericScalar!
  source: Question
  forms(
    before: String
    after: String
    first: Int
    last: Int
    metaValue: [MetaValueFilterType]

    """
    FormOrdering
    """
    orderBy: [FormOrdering]
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    createdByUser: String
    createdByGroup: String
    metaHasKey: String
    search: String
    slugs: [String]
  ): FormConnection

  """
  The ID of the object.
  """
  id: ID!
  minValue: Float
  maxValue: Float
}

type Flow implements Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String

  """
  The ID of the object.
  """
  id: ID!
  next: FlowJexl!
  tasks: [Task]!
}

type FlowConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!

  """
  Contains the nodes in this connection.
  """
  edges: [FlowEdge]!
  totalCount: Int
}

"""
A Relay edge containing a `Flow` and its cursor.
"""
type FlowEdge {
  """
  The item at the end of the edge
  """
  node: Flow

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
Flow jexl represents a jexl expression returning task slugs.

Following transforms can be used:
* task - return single task
* tasks - return multiple tasks

Examples:
* 'task-slug'|task
* ['task-slug1', 'task-slug2']|tasks
"""
scalar FlowJexl

type Form implements Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  name: String!
  description: String
  meta: GenericScalar
  isPublished: Boolean!
  isArchived: Boolean!
  questions(
    before: String
    after: String
    first: Int
    last: Int
    metaValue: [MetaValueFilterType]
    slug: String
    label: String
    isRequired: String
    isHidden: String
    isArchived: Boolean
    createdByUser: String
    createdByGroup: String
    metaHasKey: String
    excludeForms: [ID]
    search: String

    """
    QuestionOrdering
    """
    orderBy: [QuestionOrdering]
  ): QuestionConnection

  """
  Reference this form has been copied from
  """
  source: Form
  documents(
    before: String
    after: String
    first: Int
    last: Int
  ): DocumentConnection

  """
  The ID of the object.
  """
  id: ID!
}

type FormatValidator {
  slug: String!
  name: String!
  regex: String!
  errorMsg: String!
}

type FormatValidatorConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!

  """
  Contains the nodes in this connection.
  """
  edges: [FormatValidatorEdge]!
  totalCount: Int
}

"""
A Relay edge containing a `FormatValidator` and its cursor.
"""
type FormatValidatorEdge {
  """
  The item at the end of the edge
  """
  node: FormatValidator

  """
  A cursor for use in pagination
  """
  cursor: String!
}

type FormConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!

  """
  Contains the nodes in this connection.
  """
  edges: [FormEdge]!
  totalCount: Int
}

"""
A Relay edge containing a `Form` and its cursor.
"""
type FormEdge {
  """
  The item at the end of the edge
  """
  node: Form

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
An enumeration.
"""
enum FormOrdering {
  """
  Name
  """
  NAME_ASC

  """
  Name (descending)
  """
  NAME_DESC

  """
  Created at
  """
  CREATED_AT_ASC

  """
  Created at (descending)
  """
  CREATED_AT_DESC

  """
  Modified at
  """
  MODIFIED_AT_ASC

  """
  Modified at (descending)
  """
  MODIFIED_AT_DESC

  """
  Created by user
  """
  CREATED_BY_USER_ASC

  """
  Created by user (descending)
  """
  CREATED_BY_USER_DESC

  """
  Created by group
  """
  CREATED_BY_GROUP_ASC

  """
  Created by group (descending)
  """
  CREATED_BY_GROUP_DESC
}

type FormQuestion implements Question & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  label: String!
  isRequired: QuestionJexl!
  isHidden: QuestionJexl!
  isArchived: Boolean!
  infoText: String
  meta: GenericScalar!
  source: Question
  forms(
    before: String
    after: String
    first: Int
    last: Int
    metaValue: [MetaValueFilterType]

    """
    FormOrdering
    """
    orderBy: [FormOrdering]
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    createdByUser: String
    createdByGroup: String
    metaHasKey: String
    search: String
    slugs: [String]
  ): FormConnection

  """
  Form referenced in a FormQuestion
  """
  subForm: Form

  """
  The ID of the object.
  """
  id: ID!
}

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

"""
Group jexl represents a jexl expression returning group names.

Following transforms can be used:
* groups - return list of group names

Examples:
* ['group-name1', 'group-name2']|groups
"""
scalar GroupJexl

"""
Lookup type to search document structures.
"""
input HasAnswerFilterType {
  question: String!
  value: GenericScalar!
  lookup: AnswerLookupMode
  hierarchy: AnswerHierarchyMode
}

type IntegerAnswer implements Answer & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String

  """
  The ID of the object.
  """
  id: ID!
  question: Question!
  value: Int!
  meta: GenericScalar!
}

type IntegerQuestion implements Question & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  label: String!
  isRequired: QuestionJexl!
  isHidden: QuestionJexl!
  isArchived: Boolean!
  placeholder: String
  infoText: String
  meta: GenericScalar!
  source: Question
  forms(
    before: String
    after: String
    first: Int
    last: Int
    metaValue: [MetaValueFilterType]

    """
    FormOrdering
    """
    orderBy: [FormOrdering]
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    createdByUser: String
    createdByGroup: String
    metaHasKey: String
    search: String
    slugs: [String]
  ): FormConnection

  """
  The ID of the object.
  """
  id: ID!
  maxValue: Int
  minValue: Int
}

"""
Allows use of a JSON String for input / output from the GraphQL schema.

Use of this type is *not recommended* as you lose the benefits of having a defined, static
schema (one of the key benefits of GraphQL).
"""
scalar JSONString

type ListAnswer implements Answer & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String

  """
  The ID of the object.
  """
  id: ID!
  question: Question!
  value: [String]!
  meta: GenericScalar!
}

enum MetaLookupMode {
  EXACT
  STARTSWITH
  CONTAINS
  GTE
  GT
  LTE
  LT
}

input MetaValueFilterType {
  key: String!
  value: GenericScalar!
  lookup: MetaLookupMode
}

type MultipleChoiceQuestion implements Question & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  label: String!
  isRequired: QuestionJexl!
  isHidden: QuestionJexl!
  isArchived: Boolean!
  infoText: String
  meta: GenericScalar!
  source: Question
  forms(
    before: String
    after: String
    first: Int
    last: Int
    metaValue: [MetaValueFilterType]

    """
    FormOrdering
    """
    orderBy: [FormOrdering]
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    createdByUser: String
    createdByGroup: String
    metaHasKey: String
    search: String
    slugs: [String]
  ): FormConnection
  options(
    before: String
    after: String
    first: Int
    last: Int
    metaValue: [MetaValueFilterType]

    """
    OptionOrdering
    """
    orderBy: [OptionOrdering]
    slug: String
    label: String
    isArchived: Boolean
    createdByUser: String
    createdByGroup: String
    metaHasKey: String
    search: String
  ): OptionConnection
  staticContent: String

  """
  The ID of the object.
  """
  id: ID!
}

type Mutation {
  saveWorkflow(input: SaveWorkflowInput!): SaveWorkflowPayload
  addWorkflowFlow(input: AddWorkflowFlowInput!): AddWorkflowFlowPayload
  removeFlow(input: RemoveFlowInput!): RemoveFlowPayload
  saveSimpleTask(input: SaveSimpleTaskInput!): SaveSimpleTaskPayload
  saveCompleteWorkflowFormTask(
    input: SaveCompleteWorkflowFormTaskInput!
  ): SaveCompleteWorkflowFormTaskPayload
  saveCompleteTaskFormTask(
    input: SaveCompleteTaskFormTaskInput!
  ): SaveCompleteTaskFormTaskPayload
  startCase(input: StartCaseInput!): StartCasePayload
    @deprecated(reason: "Use SaveCase mutation instead")
  saveCase(input: SaveCaseInput!): SaveCasePayload
  cancelCase(input: CancelCaseInput!): CancelCasePayload
  completeWorkItem(input: CompleteWorkItemInput!): CompleteWorkItemPayload
  saveWorkItem(input: SaveWorkItemInput!): SaveWorkItemPayload
  createWorkItem(input: CreateWorkItemInput!): CreateWorkItemPayload
  saveForm(input: SaveFormInput!): SaveFormPayload
  copyForm(input: CopyFormInput!): CopyFormPayload

  """
  Add question at the end of form.
  """
  addFormQuestion(input: AddFormQuestionInput!): AddFormQuestionPayload
  removeFormQuestion(input: RemoveFormQuestionInput!): RemoveFormQuestionPayload
  reorderFormQuestions(
    input: ReorderFormQuestionsInput!
  ): ReorderFormQuestionsPayload
  saveOption(input: SaveOptionInput!): SaveOptionPayload
  copyOption(input: CopyOptionInput!): CopyOptionPayload
  copyQuestion(input: CopyQuestionInput!): CopyQuestionPayload
  saveTextQuestion(input: SaveTextQuestionInput!): SaveTextQuestionPayload
  saveTextareaQuestion(
    input: SaveTextareaQuestionInput!
  ): SaveTextareaQuestionPayload
  saveDateQuestion(input: SaveDateQuestionInput!): SaveDateQuestionPayload
  saveChoiceQuestion(input: SaveChoiceQuestionInput!): SaveChoiceQuestionPayload
  saveMultipleChoiceQuestion(
    input: SaveMultipleChoiceQuestionInput!
  ): SaveMultipleChoiceQuestionPayload
  saveDynamicChoiceQuestion(
    input: SaveDynamicChoiceQuestionInput!
  ): SaveDynamicChoiceQuestionPayload
  saveDynamicMultipleChoiceQuestion(
    input: SaveDynamicMultipleChoiceQuestionInput!
  ): SaveDynamicMultipleChoiceQuestionPayload
  saveFloatQuestion(input: SaveFloatQuestionInput!): SaveFloatQuestionPayload
  saveIntegerQuestion(
    input: SaveIntegerQuestionInput!
  ): SaveIntegerQuestionPayload
  saveTableQuestion(input: SaveTableQuestionInput!): SaveTableQuestionPayload
  saveFormQuestion(input: SaveFormQuestionInput!): SaveFormQuestionPayload
  saveFileQuestion(input: SaveFileQuestionInput!): SaveFileQuestionPayload
  saveStaticQuestion(input: SaveStaticQuestionInput!): SaveStaticQuestionPayload
  saveDocument(input: SaveDocumentInput!): SaveDocumentPayload
  saveDocumentStringAnswer(
    input: SaveDocumentStringAnswerInput!
  ): SaveDocumentStringAnswerPayload
  saveDocumentIntegerAnswer(
    input: SaveDocumentIntegerAnswerInput!
  ): SaveDocumentIntegerAnswerPayload
  saveDocumentFloatAnswer(
    input: SaveDocumentFloatAnswerInput!
  ): SaveDocumentFloatAnswerPayload
  saveDocumentDateAnswer(
    input: SaveDocumentDateAnswerInput!
  ): SaveDocumentDateAnswerPayload
  saveDocumentListAnswer(
    input: SaveDocumentListAnswerInput!
  ): SaveDocumentListAnswerPayload
  saveDocumentTableAnswer(
    input: SaveDocumentTableAnswerInput!
  ): SaveDocumentTableAnswerPayload
  saveDocumentFileAnswer(
    input: SaveDocumentFileAnswerInput!
  ): SaveDocumentFileAnswerPayload
  removeAnswer(input: RemoveAnswerInput!): RemoveAnswerPayload
  removeDocument(input: RemoveDocumentInput!): RemoveDocumentPayload
}

"""
An object with an ID
"""
interface Node {
  """
  The ID of the object.
  """
  id: ID!
}

type Option implements Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  label: String!
  isArchived: Boolean!
  meta: GenericScalar

  """
  Reference this option has been copied from
  """
  source: Option

  """
  The ID of the object.
  """
  id: ID!
}

type OptionConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!

  """
  Contains the nodes in this connection.
  """
  edges: [OptionEdge]!
  totalCount: Int
}

"""
A Relay edge containing a `Option` and its cursor.
"""
type OptionEdge {
  """
  The item at the end of the edge
  """
  node: Option

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
An enumeration.
"""
enum OptionOrdering {
  """
  Label
  """
  LABEL_ASC

  """
  Label (descending)
  """
  LABEL_DESC

  """
  Created at
  """
  CREATED_AT_ASC

  """
  Created at (descending)
  """
  CREATED_AT_DESC

  """
  Modified at
  """
  MODIFIED_AT_ASC

  """
  Modified at (descending)
  """
  MODIFIED_AT_DESC

  """
  Created by user
  """
  CREATED_BY_USER_ASC

  """
  Created by user (descending)
  """
  CREATED_BY_USER_DESC

  """
  Created by group
  """
  CREATED_BY_GROUP_ASC

  """
  Created by group (descending)
  """
  CREATED_BY_GROUP_DESC
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Query {
  allDataSources(
    before: String
    after: String
    first: Int
    last: Int
  ): DataSourceConnection
  dataSource(
    name: String
    before: String
    after: String
    first: Int
    last: Int
  ): DataSourceDataConnection
  allWorkflows(
    before: String
    after: String
    first: Int
    last: Int
    metaValue: [MetaValueFilterType]
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    createdByUser: String
    createdByGroup: String
    metaHasKey: String
    search: String

    """
    WorkflowOrdering
    """
    orderBy: [WorkflowOrdering]
  ): WorkflowConnection
  allTasks(
    before: String
    after: String
    first: Int
    last: Int
    metaValue: [MetaValueFilterType]
    slug: String
    name: String
    description: String
    type: TaskTypeArgument
    isArchived: Boolean
    createdByUser: String
    createdByGroup: String
    metaHasKey: String
    search: String

    """
    TaskOrdering
    """
    orderBy: [TaskOrdering]
  ): TaskConnection
  allCases(
    before: String
    after: String
    first: Int
    last: Int
    metaValue: [MetaValueFilterType]
    workflow: ID
    createdByUser: String
    createdByGroup: String
    metaHasKey: String

    """
    CaseOrdering
    """
    orderBy: [CaseOrdering]
    documentForm: String
    hasAnswer: [HasAnswerFilterType]
    status: [CaseStatusArgument]

    """
    Expects a question slug. If the slug is prefixed with a hyphen, the order will be reversed

    For file questions, the filename is used for sorting.

    Table questions are not supported at this time.
    """
    orderByQuestionAnswerValue: String
  ): CaseConnection
  allWorkItems(
    before: String
    after: String
    first: Int
    last: Int
    metaValue: [MetaValueFilterType]
    status: WorkItemStatusArgument

    """
    WorkItemOrdering
    """
    orderBy: [WorkItemOrdering]
    documentHasAnswer: [HasAnswerFilterType]
    caseDocumentHasAnswer: [HasAnswerFilterType]
    task: ID
    case: ID
    createdByUser: String
    createdByGroup: String
    metaHasKey: String
    addressedGroups: [String]
  ): WorkItemConnection
  allForms(
    before: String
    after: String
    first: Int
    last: Int
    metaValue: [MetaValueFilterType]

    """
    FormOrdering
    """
    orderBy: [FormOrdering]
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    createdByUser: String
    createdByGroup: String
    metaHasKey: String
    search: String
    slugs: [String]
  ): FormConnection
  allQuestions(
    before: String
    after: String
    first: Int
    last: Int
    metaValue: [MetaValueFilterType]

    """
    QuestionOrdering
    """
    orderBy: [QuestionOrdering]
    slug: String
    label: String
    isRequired: String
    isHidden: String
    isArchived: Boolean
    createdByUser: String
    createdByGroup: String
    metaHasKey: String
    excludeForms: [ID]
    search: String
  ): QuestionConnection
  allDocuments(
    before: String
    after: String
    first: Int
    last: Int
    metaValue: [MetaValueFilterType]
    form: ID
    forms: [ID]
    search: String
    id: ID
    createdByUser: String
    createdByGroup: String
    metaHasKey: String

    """
    DocumentOrdering
    """
    orderBy: [DocumentOrdering]
    rootDocument: ID
    hasAnswer: [HasAnswerFilterType]
  ): DocumentConnection
  allFormatValidators(
    before: String
    after: String
    first: Int
    last: Int
  ): FormatValidatorConnection
  documentValidity(
    id: ID!
    before: String
    after: String
    first: Int
    last: Int
  ): DocumentValidityConnection

  """
  The ID of the object
  """
  node(id: ID!): Node
}

interface Question {
  id: ID!
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  label: String!
  infoText: String
  isRequired: QuestionJexl!
  isHidden: QuestionJexl!
  isArchived: Boolean!
  meta: GenericScalar!
  forms(
    before: String
    after: String
    first: Int
    last: Int
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    createdByUser: String
    createdByGroup: String
    metaHasKey: String
    metaValue: [MetaValueFilterType]
    search: String

    """
    FormOrdering
    """
    orderBy: [FormOrdering]
    slugs: [String]
  ): FormConnection
  source: Question
}

type QuestionConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!

  """
  Contains the nodes in this connection.
  """
  edges: [QuestionEdge]!
  totalCount: Int
}

"""
A Relay edge containing a `Question` and its cursor.
"""
type QuestionEdge {
  """
  The item at the end of the edge
  """
  node: Question

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
Question jexl expression returning boolean.

Following transform can be used:
* answer - access answer of document by question slug
* mapby - map list by key. Helpful to work with table answers
  whereas an answer is a list of dicts.

Following context is available:
* form - access form of document

Examples:
* 'answer' == 'question-slug'|answer
* 'answer' in 'list-question-slug'|answer
* 'answer' in 'table-question-slug'|answer|mapby('column-question')
* 'form-slug' == form
"""
scalar QuestionJexl

"""
An enumeration.
"""
enum QuestionOrdering {
  """
  Label
  """
  LABEL_ASC

  """
  Label (descending)
  """
  LABEL_DESC

  """
  Created at
  """
  CREATED_AT_ASC

  """
  Created at (descending)
  """
  CREATED_AT_DESC

  """
  Modified at
  """
  MODIFIED_AT_ASC

  """
  Modified at (descending)
  """
  MODIFIED_AT_DESC

  """
  Created by user
  """
  CREATED_BY_USER_ASC

  """
  Created by user (descending)
  """
  CREATED_BY_USER_DESC

  """
  Created by group
  """
  CREATED_BY_GROUP_ASC

  """
  Created by group (descending)
  """
  CREATED_BY_GROUP_DESC
}

input RemoveAnswerInput {
  answer: ID!
  clientMutationId: String
}

type RemoveAnswerPayload {
  answer: Answer
  clientMutationId: String
}

input RemoveDocumentInput {
  document: ID!
  clientMutationId: String
}

type RemoveDocumentPayload {
  document: Document
  clientMutationId: String
}

input RemoveFlowInput {
  flow: ID!
  clientMutationId: String
}

type RemoveFlowPayload {
  flow: Flow
  clientMutationId: String
}

input RemoveFormQuestionInput {
  form: ID!
  question: ID!
  clientMutationId: String
}

type RemoveFormQuestionPayload {
  form: Form
  clientMutationId: String
}

input ReorderFormQuestionsInput {
  form: ID!
  questions: [ID]!
  clientMutationId: String
}

type ReorderFormQuestionsPayload {
  form: Form
  clientMutationId: String
}

input SaveCaseInput {
  id: String
  workflow: ID!
  meta: JSONString
  parentWorkItem: ID
  form: ID
  clientMutationId: String
}

type SaveCasePayload {
  case: Case
  clientMutationId: String
}

input SaveChoiceQuestionInput {
  slug: String!
  label: String!
  infoText: String
  isRequired: QuestionJexl
  isHidden: QuestionJexl
  meta: JSONString
  isArchived: Boolean
  options: [ID]!
  clientMutationId: String
}

type SaveChoiceQuestionPayload {
  question: Question
  clientMutationId: String
}

input SaveCompleteTaskFormTaskInput {
  slug: String!
  name: String!
  description: String
  meta: JSONString

  """
  Group jexl returning what group(s) derived work items will be addressed to.
  """
  addressGroups: GroupJexl
  isArchived: Boolean

  """
  Time in seconds task may take to be processed.
  """
  leadTime: Int

  """
  Allows creating multiple work items for this task using the `CreateWorkItem`
  mutation. If true, one work item will be created for each entry in
  `address_groups`.
  """
  isMultipleInstance: Boolean
  form: ID!
  clientMutationId: String
}

type SaveCompleteTaskFormTaskPayload {
  task: Task
  clientMutationId: String
}

input SaveCompleteWorkflowFormTaskInput {
  slug: String!
  name: String!
  description: String
  meta: JSONString

  """
  Group jexl returning what group(s) derived work items will be addressed to.
  """
  addressGroups: GroupJexl
  isArchived: Boolean

  """
  Time in seconds task may take to be processed.
  """
  leadTime: Int

  """
  Allows creating multiple work items for this task using the `CreateWorkItem`
  mutation. If true, one work item will be created for each entry in
  `address_groups`.
  """
  isMultipleInstance: Boolean
  clientMutationId: String
}

type SaveCompleteWorkflowFormTaskPayload {
  task: Task
  clientMutationId: String
}

input SaveDateQuestionInput {
  slug: String!
  label: String!
  infoText: String
  isRequired: QuestionJexl
  isHidden: QuestionJexl
  meta: JSONString
  isArchived: Boolean
  clientMutationId: String
}

type SaveDateQuestionPayload {
  question: Question
  clientMutationId: String
}

input SaveDocumentDateAnswerInput {
  question: ID!
  document: ID!
  meta: JSONString
  value: Date!
  clientMutationId: String
}

type SaveDocumentDateAnswerPayload {
  answer: Answer
  clientMutationId: String
}

input SaveDocumentFileAnswerInput {
  question: ID!
  document: ID!
  meta: JSONString
  value: String!
  valueId: ID
  clientMutationId: String
}

type SaveDocumentFileAnswerPayload {
  answer: Answer
  clientMutationId: String
}

input SaveDocumentFloatAnswerInput {
  question: ID!
  document: ID!
  meta: JSONString
  value: Float!
  clientMutationId: String
}

type SaveDocumentFloatAnswerPayload {
  answer: Answer
  clientMutationId: String
}

input SaveDocumentInput {
  id: String
  form: ID!
  meta: JSONString
  clientMutationId: String
}

input SaveDocumentIntegerAnswerInput {
  question: ID!
  document: ID!
  meta: JSONString
  value: Int!
  clientMutationId: String
}

type SaveDocumentIntegerAnswerPayload {
  answer: Answer
  clientMutationId: String
}

input SaveDocumentListAnswerInput {
  question: ID!
  document: ID!
  meta: JSONString
  value: [String]!
  clientMutationId: String
}

type SaveDocumentListAnswerPayload {
  answer: Answer
  clientMutationId: String
}

type SaveDocumentPayload {
  document: Document
  clientMutationId: String
}

input SaveDocumentStringAnswerInput {
  question: ID!
  document: ID!
  meta: JSONString
  value: String!
  clientMutationId: String
}

type SaveDocumentStringAnswerPayload {
  answer: Answer
  clientMutationId: String
}

input SaveDocumentTableAnswerInput {
  question: ID!
  document: ID!
  meta: JSONString

  """
  List of document IDs representing the rows in the table.
  """
  value: [ID]!
  clientMutationId: String
}

type SaveDocumentTableAnswerPayload {
  answer: Answer
  clientMutationId: String
}

input SaveDynamicChoiceQuestionInput {
  slug: String!
  label: String!
  infoText: String
  isRequired: QuestionJexl
  isHidden: QuestionJexl
  meta: JSONString
  isArchived: Boolean
  dataSource: String!
  clientMutationId: String
}

type SaveDynamicChoiceQuestionPayload {
  question: Question
  clientMutationId: String
}

input SaveDynamicMultipleChoiceQuestionInput {
  slug: String!
  label: String!
  infoText: String
  isRequired: QuestionJexl
  isHidden: QuestionJexl
  meta: JSONString
  isArchived: Boolean
  dataSource: String!
  clientMutationId: String
}

type SaveDynamicMultipleChoiceQuestionPayload {
  question: Question
  clientMutationId: String
}

input SaveFileQuestionInput {
  slug: String!
  label: String!
  infoText: String
  isRequired: QuestionJexl
  isHidden: QuestionJexl
  meta: JSONString
  isArchived: Boolean
  clientMutationId: String
}

type SaveFileQuestionPayload {
  question: Question
  clientMutationId: String
}

input SaveFloatQuestionInput {
  slug: String!
  label: String!
  infoText: String
  isRequired: QuestionJexl
  isHidden: QuestionJexl
  meta: JSONString
  isArchived: Boolean
  minValue: Float
  maxValue: Float
  placeholder: String
  clientMutationId: String
}

type SaveFloatQuestionPayload {
  question: Question
  clientMutationId: String
}

input SaveFormInput {
  slug: String!
  name: String!
  description: String
  meta: JSONString
  isArchived: Boolean
  isPublished: Boolean
  clientMutationId: String
}

type SaveFormPayload {
  form: Form
  clientMutationId: String
}

input SaveFormQuestionInput {
  slug: String!
  label: String!
  infoText: String
  isRequired: QuestionJexl
  isHidden: QuestionJexl
  meta: JSONString
  isArchived: Boolean
  subForm: ID!
  clientMutationId: String
}

type SaveFormQuestionPayload {
  question: Question
  clientMutationId: String
}

input SaveIntegerQuestionInput {
  slug: String!
  label: String!
  infoText: String
  isRequired: QuestionJexl
  isHidden: QuestionJexl
  meta: JSONString
  isArchived: Boolean
  minValue: Int
  maxValue: Int
  placeholder: String
  clientMutationId: String
}

type SaveIntegerQuestionPayload {
  question: Question
  clientMutationId: String
}

input SaveMultipleChoiceQuestionInput {
  slug: String!
  label: String!
  infoText: String
  isRequired: QuestionJexl
  isHidden: QuestionJexl
  meta: JSONString
  isArchived: Boolean
  options: [ID]!
  clientMutationId: String
}

type SaveMultipleChoiceQuestionPayload {
  question: Question
  clientMutationId: String
}

input SaveOptionInput {
  slug: String!
  label: String!
  isArchived: Boolean
  meta: JSONString
  clientMutationId: String
}

type SaveOptionPayload {
  option: Option
  clientMutationId: String
}

input SaveSimpleTaskInput {
  slug: String!
  name: String!
  description: String
  meta: JSONString

  """
  Group jexl returning what group(s) derived work items will be addressed to.
  """
  addressGroups: GroupJexl
  isArchived: Boolean

  """
  Time in seconds task may take to be processed.
  """
  leadTime: Int

  """
  Allows creating multiple work items for this task using the `CreateWorkItem`
  mutation. If true, one work item will be created for each entry in
  `address_groups`.
  """
  isMultipleInstance: Boolean
  clientMutationId: String
}

type SaveSimpleTaskPayload {
  task: Task
  clientMutationId: String
}

input SaveStaticQuestionInput {
  label: String!
  slug: String!
  infoText: String
  isHidden: QuestionJexl
  meta: JSONString
  isArchived: Boolean
  staticContent: String
  clientMutationId: String
}

type SaveStaticQuestionPayload {
  question: Question
  clientMutationId: String
}

input SaveTableQuestionInput {
  slug: String!
  label: String!
  infoText: String
  isRequired: QuestionJexl
  isHidden: QuestionJexl
  meta: JSONString
  isArchived: Boolean

  """
  Form that represents rows of a TableQuestion
  """
  rowForm: ID!
  clientMutationId: String
}

type SaveTableQuestionPayload {
  question: Question
  clientMutationId: String
}

input SaveTextareaQuestionInput {
  slug: String!
  label: String!
  infoText: String
  isRequired: QuestionJexl
  isHidden: QuestionJexl
  meta: JSONString
  isArchived: Boolean
  maxLength: Int
  placeholder: String
  formatValidators: [String]
  clientMutationId: String
}

type SaveTextareaQuestionPayload {
  question: Question
  clientMutationId: String
}

input SaveTextQuestionInput {
  slug: String!
  label: String!
  infoText: String
  isRequired: QuestionJexl
  isHidden: QuestionJexl
  meta: JSONString
  isArchived: Boolean
  maxLength: Int
  placeholder: String
  formatValidators: [String]
  clientMutationId: String
}

type SaveTextQuestionPayload {
  question: Question
  clientMutationId: String
}

input SaveWorkflowInput {
  slug: String!
  name: String!
  description: String
  meta: JSONString

  """
  Starting task(s) of the workflow.
  """
  startTasks: [ID]!

  """
  Allow workflow to be started with any form
  """
  allowAllForms: Boolean

  """
  List of forms which are allowed to start workflow with
  """
  allowForms: [ID]
  isArchived: Boolean
  isPublished: Boolean
  clientMutationId: String
}

type SaveWorkflowPayload {
  workflow: Workflow
  clientMutationId: String
}

input SaveWorkItemInput {
  workItem: ID!

  """
  Users responsible to undertake given work item.
  """
  assignedUsers: [String]
  deadline: DateTime
  meta: JSONString
  clientMutationId: String
}

type SaveWorkItemPayload {
  workItem: WorkItem
  clientMutationId: String
}

type SimpleTask implements Task & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  name: String!
  description: String
  type: TaskType!
  meta: GenericScalar!
  addressGroups: GroupJexl
  isArchived: Boolean!

  """
  Time in seconds task may take to be processed.
  """
  leadTime: Int
  isMultipleInstance: Boolean!

  """
  The ID of the object.
  """
  id: ID!
}

input StartCaseInput {
  workflow: ID!
  meta: JSONString
  parentWorkItem: ID
  form: ID
  clientMutationId: String
}

type StartCasePayload {
  case: Case
  clientMutationId: String
}

type StaticQuestion implements Question & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  label: String!
  isHidden: QuestionJexl!
  isArchived: Boolean!
  infoText: String
  meta: GenericScalar!
  source: Question
  forms(
    before: String
    after: String
    first: Int
    last: Int
    metaValue: [MetaValueFilterType]

    """
    FormOrdering
    """
    orderBy: [FormOrdering]
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    createdByUser: String
    createdByGroup: String
    metaHasKey: String
    search: String
    slugs: [String]
  ): FormConnection
  staticContent: String
  dataSource: String

  """
  The ID of the object.
  """
  id: ID!
  isRequired: QuestionJexl!
}

type StringAnswer implements Answer & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String

  """
  The ID of the object.
  """
  id: ID!
  question: Question!
  value: String!
  meta: GenericScalar!
}

type TableAnswer implements Answer & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String

  """
  The ID of the object.
  """
  id: ID!
  question: Question!
  value: [Document]!
  meta: GenericScalar!
  document: Document!
}

type TableQuestion implements Question & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  label: String!
  isRequired: QuestionJexl!
  isHidden: QuestionJexl!
  isArchived: Boolean!
  infoText: String
  meta: GenericScalar!
  source: Question
  forms(
    before: String
    after: String
    first: Int
    last: Int
    metaValue: [MetaValueFilterType]

    """
    FormOrdering
    """
    orderBy: [FormOrdering]
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    createdByUser: String
    createdByGroup: String
    metaHasKey: String
    search: String
    slugs: [String]
  ): FormConnection

  """
  Form that represents rows of a TableQuestion
  """
  rowForm: Form

  """
  The ID of the object.
  """
  id: ID!
}

interface Task {
  id: ID!
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  name: String!
  description: String
  isArchived: Boolean!
  addressGroups: GroupJexl
  meta: GenericScalar!
  isMultipleInstance: Boolean!
}

type TaskConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!

  """
  Contains the nodes in this connection.
  """
  edges: [TaskEdge]!
  totalCount: Int
}

"""
A Relay edge containing a `Task` and its cursor.
"""
type TaskEdge {
  """
  The item at the end of the edge
  """
  node: Task

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
An enumeration.
"""
enum TaskOrdering {
  """
  Name
  """
  NAME_ASC

  """
  Name (descending)
  """
  NAME_DESC

  """
  Description
  """
  DESCRIPTION_ASC

  """
  Description (descending)
  """
  DESCRIPTION_DESC

  """
  Type
  """
  TYPE_ASC

  """
  Type (descending)
  """
  TYPE_DESC

  """
  Created at
  """
  CREATED_AT_ASC

  """
  Created at (descending)
  """
  CREATED_AT_DESC

  """
  Modified at
  """
  MODIFIED_AT_ASC

  """
  Modified at (descending)
  """
  MODIFIED_AT_DESC

  """
  Created by user
  """
  CREATED_BY_USER_ASC

  """
  Created by user (descending)
  """
  CREATED_BY_USER_DESC

  """
  Created by group
  """
  CREATED_BY_GROUP_ASC

  """
  Created by group (descending)
  """
  CREATED_BY_GROUP_DESC
}

"""
An enumeration.
"""
enum TaskType {
  """
  Task which can simply be marked as completed.
  """
  SIMPLE

  """
  Task to complete a defined workflow form.
  """
  COMPLETE_WORKFLOW_FORM

  """
  Task to complete a defined task form.
  """
  COMPLETE_TASK_FORM
}

"""
An enumeration.
"""
enum TaskTypeArgument {
  """
  Task which can simply be marked as completed.
  """
  SIMPLE

  """
  Task to complete a defined workflow form.
  """
  COMPLETE_WORKFLOW_FORM

  """
  Task to complete a defined task form.
  """
  COMPLETE_TASK_FORM
}

type TextareaQuestion implements Question & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  label: String!
  isRequired: QuestionJexl!
  isHidden: QuestionJexl!
  isArchived: Boolean!
  placeholder: String
  infoText: String
  meta: GenericScalar!
  source: Question
  formatValidators(
    before: String
    after: String
    first: Int
    last: Int
  ): FormatValidatorConnection
  forms(
    before: String
    after: String
    first: Int
    last: Int
    metaValue: [MetaValueFilterType]

    """
    FormOrdering
    """
    orderBy: [FormOrdering]
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    createdByUser: String
    createdByGroup: String
    metaHasKey: String
    search: String
    slugs: [String]
  ): FormConnection

  """
  The ID of the object.
  """
  id: ID!
  maxLength: Int
}

type TextQuestion implements Question & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  label: String!
  isRequired: QuestionJexl!
  isHidden: QuestionJexl!
  isArchived: Boolean!
  placeholder: String
  infoText: String
  meta: GenericScalar!
  source: Question
  formatValidators(
    before: String
    after: String
    first: Int
    last: Int
  ): FormatValidatorConnection
  forms(
    before: String
    after: String
    first: Int
    last: Int
    metaValue: [MetaValueFilterType]

    """
    FormOrdering
    """
    orderBy: [FormOrdering]
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    createdByUser: String
    createdByGroup: String
    metaHasKey: String
    search: String
    slugs: [String]
  ): FormConnection

  """
  The ID of the object.
  """
  id: ID!
  maxLength: Int
}

type ValidationEntry {
  slug: String!
  errorMsg: String!
}

type ValidationResult {
  id: ID
  isValid: Boolean
  errors: [ValidationEntry]
}

type Workflow implements Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  name: String!
  description: String
  meta: GenericScalar
  isPublished: Boolean!
  isArchived: Boolean!
  startTasks: [Task]!

  """
  Allow workflow to be started with any form
  """
  allowAllForms: Boolean!

  """
  List of forms which are allowed to start workflow with
  """
  allowForms(
    before: String
    after: String
    first: Int
    last: Int
  ): FormConnection

  """
  The ID of the object.
  """
  id: ID!

  """
  List of tasks referenced in workflow
  """
  tasks: [Task]!
  flows(
    before: String
    after: String
    first: Int
    last: Int
    task: ID
    createdByUser: String
    createdByGroup: String
  ): FlowConnection
}

type WorkflowConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!

  """
  Contains the nodes in this connection.
  """
  edges: [WorkflowEdge]!
  totalCount: Int
}

"""
A Relay edge containing a `Workflow` and its cursor.
"""
type WorkflowEdge {
  """
  The item at the end of the edge
  """
  node: Workflow

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
An enumeration.
"""
enum WorkflowOrdering {
  """
  Name
  """
  NAME_ASC

  """
  Name (descending)
  """
  NAME_DESC

  """
  Description
  """
  DESCRIPTION_ASC

  """
  Description (descending)
  """
  DESCRIPTION_DESC

  """
  Created at
  """
  CREATED_AT_ASC

  """
  Created at (descending)
  """
  CREATED_AT_DESC

  """
  Modified at
  """
  MODIFIED_AT_ASC

  """
  Modified at (descending)
  """
  MODIFIED_AT_DESC

  """
  Created by user
  """
  CREATED_BY_USER_ASC

  """
  Created by user (descending)
  """
  CREATED_BY_USER_DESC

  """
  Created by group
  """
  CREATED_BY_GROUP_ASC

  """
  Created by group (descending)
  """
  CREATED_BY_GROUP_DESC
}

type WorkItem implements Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String

  """
  The ID of the object.
  """
  id: ID!

  """
  Time when work item has either been canceled or completed
  """
  closedAt: DateTime
  closedByUser: String
  closedByGroup: String
  deadline: DateTime
  task: Task!
  status: WorkItemStatus!
  meta: GenericScalar

  """
  Offer work item to be processed by a group of users, such are not committed to process it though.
  """
  addressedGroups: [String]!

  """
  Users responsible to undertake given work item.
  """
  assignedUsers: [String]!
  case: Case!

  """
  Defines case of a sub-workflow
  """
  childCase: Case
  document: Document
}

type WorkItemConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!

  """
  Contains the nodes in this connection.
  """
  edges: [WorkItemEdge]!
  totalCount: Int
}

"""
A Relay edge containing a `WorkItem` and its cursor.
"""
type WorkItemEdge {
  """
  The item at the end of the edge
  """
  node: WorkItem

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
An enumeration.
"""
enum WorkItemOrdering {
  """
  Status
  """
  STATUS_ASC

  """
  Status (descending)
  """
  STATUS_DESC

  """
  Deadline
  """
  DEADLINE_ASC

  """
  Deadline (descending)
  """
  DEADLINE_DESC

  """
  Created at
  """
  CREATED_AT_ASC

  """
  Created at (descending)
  """
  CREATED_AT_DESC

  """
  Modified at
  """
  MODIFIED_AT_ASC

  """
  Modified at (descending)
  """
  MODIFIED_AT_DESC

  """
  Created by user
  """
  CREATED_BY_USER_ASC

  """
  Created by user (descending)
  """
  CREATED_BY_USER_DESC

  """
  Created by group
  """
  CREATED_BY_GROUP_ASC

  """
  Created by group (descending)
  """
  CREATED_BY_GROUP_DESC
}

"""
An enumeration.
"""
enum WorkItemStatus {
  """
  Task is ready to be processed.
  """
  READY

  """
  Task is done.
  """
  COMPLETED

  """
  Task is cancelled.
  """
  CANCELED
}

"""
An enumeration.
"""
enum WorkItemStatusArgument {
  """
  Task is ready to be processed.
  """
  READY

  """
  Task is done.
  """
  COMPLETED

  """
  Task is cancelled.
  """
  CANCELED
}
